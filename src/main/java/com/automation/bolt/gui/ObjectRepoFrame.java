/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.automation.bolt.gui;

import com.automation.bolt.common;
import static com.automation.bolt.gui.EditRegressionSuite.*;
import com.automation.bolt.renderer.*;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.DefaultComboBoxModel;
import javax.swing.GroupLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.LayoutStyle;
import javax.swing.ListSelectionModel;
import javax.swing.SwingConstants;
import javax.swing.WindowConstants;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.FillPatternType;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFDataFormat;
import org.apache.poi.xssf.usermodel.XSSFFont;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author zakir
 */
public class ObjectRepoFrame extends javax.swing.JFrame {
    public static DefaultTableModel importObjectRepoData = new DefaultTableModel();
    public static EditRegressionSuite RegSuite = new EditRegressionSuite();
    public static tableAddORCellRenderer renderer = new tableAddORCellRenderer();
    
    public static TableColumn testElmNameCol =null;
    public static JTextField testElmNameTxt =new JTextField();
    
    public static TableColumn elmIdCol =null;
    public static JTextField elmIdTxt =new JTextField();
    
    public static TableColumn elmXpathCol =null;
    public static JTextField elmXpathTxt =new JTextField();
    
    public static int getFlowCellxPoint;
    public static int getFlowCellyPoint;
    public static int getEditingRow;
    public static boolean testElmNameVisible;
    public static boolean duplicateElmName =false;
    
    /**
     * Creates new form ObjectRepoFrame
     */
    public ObjectRepoFrame() {
        initComponents();
        
        /*testElmNameTxt.addKeyListener(new KeyAdapter() {
            public void keyTyped(KeyEvent evt) {
                common.testElmNameTxtTxtKeyTyped(evt, testElmNameTxt);
            }
        });*/
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ObjectRepoScrollPane = new JScrollPane();
        ObjectRepoTable = new JTable();
        Menu = new JPanel();
        AddNewTestElement = new JButton();
        DeleteTestElement = new JButton();
        SaveElementRepository = new JButton();

        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Object Repository");
        setBackground(new Color(51, 51, 51));
        setForeground(Color.black);
        setName("Bolt: Object Repositroy"); // NOI18N
        addWindowListener(new WindowAdapter() {
            public void windowActivated(WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowClosed(WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        ObjectRepoScrollPane.setBackground(new Color(51, 51, 51));
        ObjectRepoScrollPane.setForeground(new Color(51, 51, 51));
        ObjectRepoScrollPane.setAutoscrolls(true);
        ObjectRepoScrollPane.setFont(new Font("Calibri", 0, 12)); // NOI18N

        ObjectRepoTable.setBackground(new Color(51, 51, 51));
        ObjectRepoTable.setFont(new Font("Consolas", 0, 13)); // NOI18N
        ObjectRepoTable.setForeground(new Color(255, 255, 255));
        ObjectRepoTable.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Test Element Name (user defined)", "id", "xpath"
            }
        ));
        ObjectRepoTable.setAutoResizeMode(JTable.AUTO_RESIZE_NEXT_COLUMN);
        ObjectRepoTable.setRowHeight(30);
        ObjectRepoTable.setRowMargin(2);
        ObjectRepoTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        ObjectRepoTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        ObjectRepoTable.setShowGrid(true);
        ObjectRepoTable.getTableHeader().setReorderingAllowed(false);
        ObjectRepoTable.setUpdateSelectionOnSort(false);
        ObjectRepoTable.setVerifyInputWhenFocusTarget(false);
        ObjectRepoTable.addMouseMotionListener(new MouseMotionAdapter() {
            public void mouseMoved(MouseEvent evt) {
                ObjectRepoTableMouseMoved(evt);
            }
        });
        ObjectRepoTable.addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent evt) {
                ObjectRepoTableMousePressed(evt);
            }
            public void mouseReleased(MouseEvent evt) {
                ObjectRepoTableMouseReleased(evt);
            }
        });
        ObjectRepoTable.addKeyListener(new KeyAdapter() {
            public void keyPressed(KeyEvent evt) {
                ObjectRepoTableKeyPressed(evt);
            }
            public void keyReleased(KeyEvent evt) {
                ObjectRepoTableKeyReleased(evt);
            }
            public void keyTyped(KeyEvent evt) {
                ObjectRepoTableKeyTyped(evt);
            }
        });
        ObjectRepoScrollPane.setViewportView(ObjectRepoTable);
        if (ObjectRepoTable.getColumnModel().getColumnCount() > 0) {
            ObjectRepoTable.getColumnModel().getColumn(0).setPreferredWidth(100);
        }

        Menu.setBackground(new Color(0, 153, 153));

        AddNewTestElement.setBackground(new Color(0, 0, 0));
        AddNewTestElement.setFont(new Font("Consolas", 1, 14)); // NOI18N
        AddNewTestElement.setForeground(new Color(255, 255, 255));
        AddNewTestElement.setText("Add New Object");
        AddNewTestElement.setBorder(null);
        AddNewTestElement.setBorderPainted(false);
        AddNewTestElement.setContentAreaFilled(false);
        AddNewTestElement.setFocusable(false);
        AddNewTestElement.setHorizontalAlignment(SwingConstants.LEFT);
        AddNewTestElement.setName(""); // NOI18N
        AddNewTestElement.setOpaque(true);
        AddNewTestElement.setRequestFocusEnabled(false);
        AddNewTestElement.setRolloverEnabled(false);
        AddNewTestElement.addMouseListener(new MouseAdapter() {
            public void mouseEntered(MouseEvent evt) {
                AddNewTestElementMouseEntered(evt);
            }
            public void mouseExited(MouseEvent evt) {
                AddNewTestElementMouseExited(evt);
            }
        });
        AddNewTestElement.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                AddNewTestElementActionPerformed(evt);
            }
        });

        DeleteTestElement.setBackground(new Color(0, 0, 0));
        DeleteTestElement.setFont(new Font("Consolas", 1, 14)); // NOI18N
        DeleteTestElement.setForeground(new Color(255, 255, 255));
        DeleteTestElement.setText("Delete Object");
        DeleteTestElement.setBorder(null);
        DeleteTestElement.setBorderPainted(false);
        DeleteTestElement.setContentAreaFilled(false);
        DeleteTestElement.setFocusPainted(false);
        DeleteTestElement.setFocusable(false);
        DeleteTestElement.setHorizontalAlignment(SwingConstants.LEFT);
        DeleteTestElement.setMaximumSize(new Dimension(115, 33));
        DeleteTestElement.setMinimumSize(new Dimension(115, 33));
        DeleteTestElement.setOpaque(true);
        DeleteTestElement.setPreferredSize(new Dimension(147, 41));
        DeleteTestElement.addMouseListener(new MouseAdapter() {
            public void mouseEntered(MouseEvent evt) {
                DeleteTestElementMouseEntered(evt);
            }
            public void mouseExited(MouseEvent evt) {
                DeleteTestElementMouseExited(evt);
            }
        });
        DeleteTestElement.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                DeleteTestElementActionPerformed(evt);
            }
        });

        SaveElementRepository.setBackground(new Color(0, 0, 0));
        SaveElementRepository.setFont(new Font("Consolas", 1, 14)); // NOI18N
        SaveElementRepository.setForeground(new Color(255, 255, 255));
        SaveElementRepository.setText("Save Object Repository");
        SaveElementRepository.setBorder(null);
        SaveElementRepository.setBorderPainted(false);
        SaveElementRepository.setContentAreaFilled(false);
        SaveElementRepository.setFocusable(false);
        SaveElementRepository.setHorizontalAlignment(SwingConstants.LEFT);
        SaveElementRepository.setMaximumSize(new Dimension(115, 33));
        SaveElementRepository.setMinimumSize(new Dimension(115, 33));
        SaveElementRepository.setOpaque(true);
        SaveElementRepository.setPreferredSize(new Dimension(115, 33));
        SaveElementRepository.setRequestFocusEnabled(false);
        SaveElementRepository.setRolloverEnabled(false);
        SaveElementRepository.addMouseListener(new MouseAdapter() {
            public void mouseEntered(MouseEvent evt) {
                SaveElementRepositoryMouseEntered(evt);
            }
            public void mouseExited(MouseEvent evt) {
                SaveElementRepositoryMouseExited(evt);
            }
        });
        SaveElementRepository.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                SaveElementRepositoryActionPerformed(evt);
            }
        });

        GroupLayout MenuLayout = new GroupLayout(Menu);
        Menu.setLayout(MenuLayout);
        MenuLayout.setHorizontalGroup(MenuLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(SaveElementRepository, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(DeleteTestElement, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(AddNewTestElement, GroupLayout.DEFAULT_SIZE, 223, Short.MAX_VALUE)
        );
        MenuLayout.setVerticalGroup(MenuLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(MenuLayout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(AddNewTestElement)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DeleteTestElement, GroupLayout.PREFERRED_SIZE, 34, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SaveElementRepository, GroupLayout.PREFERRED_SIZE, 31, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(335, Short.MAX_VALUE))
        );

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addComponent(ObjectRepoScrollPane, GroupLayout.DEFAULT_SIZE, 767, Short.MAX_VALUE)
                .addGap(1, 1, 1)
                .addComponent(Menu, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1))
        );
        layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(ObjectRepoScrollPane, GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addComponent(Menu, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        getAccessibleContext().setAccessibleParent(this);

        setSize(new Dimension(1009, 527));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void AddNewTestElementActionPerformed(ActionEvent evt) {//GEN-FIRST:event_AddNewTestElementActionPerformed
        if(common.checkForDuplicateElementName(null, testElmNameTxt,
                ObjectRepoTable,
                testElmNameVisible, 
                getFlowCellxPoint,
                getFlowCellyPoint,
                getEditingRow) ==true)
            return;
        
        importObjectRepoData.addRow(new Object[] {null,null,null});
        ObjectRepoTable.setRowSelectionInterval(ObjectRepoTable.getRowCount()-1, ObjectRepoTable.getRowCount()-1);
        ObjectRepoTable.scrollRectToVisible(ObjectRepoTable.getCellRect(ObjectRepoTable.getRowCount()-1,0, true));
        ObjectRepoTable.requestFocus();
    }//GEN-LAST:event_AddNewTestElementActionPerformed

    private void DeleteTestElementActionPerformed(ActionEvent evt) {//GEN-FIRST:event_DeleteTestElementActionPerformed
        if(ObjectRepoTable.getRowCount()>0){
            
            if(testElmNameTxt.isShowing()){
                tabOutFromEditingColumn(true, ObjectRepoTable,getFlowCellxPoint, getFlowCellyPoint, getEditingRow);
            }
            
           int rowIndex = ObjectRepoTable.getSelectedRow();
           int lastRowIndex;
        
            if(ObjectRepoTable.getRowCount()-1 == rowIndex)
                lastRowIndex = ObjectRepoTable.getRowCount()-2;
            else
                lastRowIndex = rowIndex;

            importObjectRepoData.removeRow(rowIndex);
            if(ObjectRepoTable.getRowCount() >0){
                ObjectRepoTable.setColumnSelectionInterval(0, 0);
                ObjectRepoTable.setRowSelectionInterval(lastRowIndex, lastRowIndex);
            }
            ObjectRepoTable.requestFocus();
            
        }else{
            JOptionPane.showMessageDialog(ObjectRepoTable,"No Object(s) available to delete!","Alert",JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_DeleteTestElementActionPerformed

    private void formWindowActivated(WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        ObjectRepoTable.requestFocus();
    }//GEN-LAST:event_formWindowActivated
            
    private void formWindowOpened(WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        
        /*testElmNameTxt.addKeyListener(new KeyAdapter() {
        public void keyPressed(KeyEvent evt) {
            testElmNameTxtkeyPressed(evt);
        }
        
        public void keyReleased(KeyEvent evt) {
            testElmNameTxtkeyReleased(evt);
        }

        private void testElmNameTxtkeyPressed(KeyEvent evt) {
            //if(evt.getKeyCode() ==10)
                //checkForDuplicateElementName();
        }

        private void testElmNameTxtkeyReleased(KeyEvent evt) {
            //if(evt.getKeyCode() ==10)
                //checkForDuplicateElementName();
        }
        });*/
               
        testElmNameCol =ObjectRepoTable.getColumnModel().getColumn(0);
        testElmNameCol.setCellEditor(new DefaultCellEditor(testElmNameTxt));
        
        elmIdCol =ObjectRepoTable.getColumnModel().getColumn(1);
        elmIdCol.setCellEditor(new DefaultCellEditor(elmIdTxt));
        
        elmXpathCol =ObjectRepoTable.getColumnModel().getColumn(2);
        elmXpathCol.setCellEditor(new DefaultCellEditor(elmXpathTxt));
        
        ObjectRepoTable.setDefaultRenderer(Object.class, renderer);
        if(ObjectRepoTable.getRowCount()>0) 
            ObjectRepoTable.setRowSelectionInterval(0,0);
    }//GEN-LAST:event_formWindowOpened

    private void formWindowClosed(WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        importObjectRepoData.getDataVector().removeAllElements();
        importObjectRepoData.fireTableDataChanged();
    }//GEN-LAST:event_formWindowClosed

    private void SaveElementRepositoryActionPerformed(ActionEvent evt) {//GEN-FIRST:event_SaveElementRepositoryActionPerformed
        boolean ORsuccessfullyUpdated = false;
      
        if(common.checkForDuplicateElementName(null, testElmNameTxt,
                ObjectRepoTable,
                testElmNameVisible,
                getFlowCellxPoint,
                getFlowCellyPoint,
                getEditingRow) ==true)
            return;
        
        if(EditRegressionSuite.LocalORJRadioButton.isSelected()){
            try {
                if(RegSuite.deleteAllTestSteps(EditRegressionSuite.excelFile,1) ==true){
                    
                    RegSuite.testObjectRepoColumn = new TableColumn();
                    RegSuite.comboBoxObjectRepository = new JComboBox<>();
                    
                    updateObjectRepository(EditRegressionSuite.excelFile,1);
                    
                    if(!EditRegressionSuite.AssociateObjORJCheckBox.isSelected()){
                        XSSFSheet getCurrSheet = RegSuite.getObjectRepositorySheet(EditRegressionSuite.testSuiteFilePath,1);
                        RegSuite.getObjectListFromObjectRepository(getCurrSheet);
                        RegSuite.ObjectRepositoryList();
                        
                        RegSuite.testObjectRepoColumn = EditRegressionSuite.RegressionSuiteTable.getColumnModel().getColumn(3);
                        RegSuite.testObjectRepoColumn.setCellEditor(new DefaultCellEditor(RegSuite.comboBoxObjectRepository));
                    }
                    JOptionPane.showMessageDialog(EditRegressionSuite.RegressionSuiteScrollPane,"Test suite "+"\""+EditRegressionSuite.excelFileImport.getName(EditRegressionSuite.excelFile)+"\""+" local repository updated and saved!","Alert",JOptionPane.WARNING_MESSAGE);
                }
            } catch (IOException ex) {
                Logger.getLogger(ObjectRepoFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else if(EditRegressionSuite.GlobalORJRadioButton.isSelected()){
            try {
                if(RegSuite.deleteAllTestSteps(excelFileOR,0) ==true){
                    updateObjectRepository(excelFileOR,0);
                    ORsuccessfullyUpdated = true;
                    JOptionPane.showMessageDialog(EditRegressionSuite.RegressionSuiteScrollPane,"Global repository "+"\""+EditRegressionSuite.excelFileImportOR.getName(excelFileOR)+"\""+" updated and saved!","Alert",JOptionPane.WARNING_MESSAGE);
                }
                if(ORsuccessfullyUpdated ==true){
                    if(EditRegressionSuite.AssociateObjORJCheckBox.isSelected()){
                        XSSFSheet getCurrSheet = RegSuite.getObjectRepositorySheet(EditRegressionSuite.testGlobalORAssociatedFilePath,0);
                        RegSuite.getObjectListFromObjectRepository(getCurrSheet);
                        RegSuite.ObjectRepositoryList();
                        
                        RegSuite.testObjectRepoColumn = EditRegressionSuite.RegressionSuiteTable.getColumnModel().getColumn(4);
                        RegSuite.testObjectRepoColumn.setCellEditor(new DefaultCellEditor(RegSuite.comboBoxObjectRepository));
                    }
                }
            } catch (IOException ex) {
                Logger.getLogger(ObjectRepoFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_SaveElementRepositoryActionPerformed

    private void AddNewTestElementMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AddNewTestElementMouseEntered
        AddNewTestElement.setBackground(new java.awt.Color(250, 128, 114));
        AddNewTestElement.setForeground(new java.awt.Color(0, 0, 0));
    }//GEN-LAST:event_AddNewTestElementMouseEntered

    private void AddNewTestElementMouseExited(MouseEvent evt) {//GEN-FIRST:event_AddNewTestElementMouseExited
        AddNewTestElement.setBackground(new java.awt.Color(0, 0, 0));
        AddNewTestElement.setForeground(new java.awt.Color(255, 255, 255));
    }//GEN-LAST:event_AddNewTestElementMouseExited

    private void DeleteTestElementMouseEntered(MouseEvent evt) {//GEN-FIRST:event_DeleteTestElementMouseEntered
        DeleteTestElement.setBackground(new java.awt.Color(250, 128, 114));
        DeleteTestElement.setForeground(new java.awt.Color(0, 0, 0));
    }//GEN-LAST:event_DeleteTestElementMouseEntered

    private void DeleteTestElementMouseExited(MouseEvent evt) {//GEN-FIRST:event_DeleteTestElementMouseExited
        DeleteTestElement.setBackground(new java.awt.Color(0, 0, 0));
        DeleteTestElement.setForeground(new java.awt.Color(255, 255, 255));
    }//GEN-LAST:event_DeleteTestElementMouseExited

    private void SaveElementRepositoryMouseEntered(MouseEvent evt) {//GEN-FIRST:event_SaveElementRepositoryMouseEntered
        SaveElementRepository.setBackground(new java.awt.Color(250, 128, 114));
        SaveElementRepository.setForeground(new java.awt.Color(0, 0, 0));
    }//GEN-LAST:event_SaveElementRepositoryMouseEntered

    private void SaveElementRepositoryMouseExited(MouseEvent evt) {//GEN-FIRST:event_SaveElementRepositoryMouseExited
        SaveElementRepository.setBackground(new java.awt.Color(0, 0, 0));
        SaveElementRepository.setForeground(new java.awt.Color(255, 255, 255));
    }//GEN-LAST:event_SaveElementRepositoryMouseExited

    private void formWindowClosing(WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        testElmNameVisible =false;
        if(testElmNameTxt.isShowing()){
          tabOutFromEditingColumn(true, ObjectRepoTable,getFlowCellxPoint, getFlowCellyPoint, getEditingRow);
        }
    }//GEN-LAST:event_formWindowClosing

    private void ObjectRepoTableMouseMoved(MouseEvent evt) {//GEN-FIRST:event_ObjectRepoTableMouseMoved
      
    }//GEN-LAST:event_ObjectRepoTableMouseMoved

    private void ObjectRepoTableMousePressed(MouseEvent evt) {//GEN-FIRST:event_ObjectRepoTableMousePressed
        int getCurRow = ObjectRepoTable.convertRowIndexToModel(ObjectRepoTable.rowAtPoint(evt.getPoint()));
        int gerCurrCol = ObjectRepoTable.convertColumnIndexToModel(ObjectRepoTable.columnAtPoint(evt.getPoint()));
         
        if(common.checkForDuplicateElementName(null, testElmNameTxt,
                ObjectRepoTable,
                testElmNameVisible,
                getFlowCellxPoint,
                getFlowCellyPoint,
                getEditingRow) ==true)
            return;
        
        switch (gerCurrCol) {
            case 0:
                ObjectRepoTable.editCellAt(getCurRow, 0);
                editableRow =ObjectRepoTable.getEditingRow();
                testElmNameTxt.requestFocusInWindow();
                break;
            case 1:
                ObjectRepoTable.editCellAt(getCurRow, 1);
                elmIdTxt.requestFocusInWindow();
                break;
            case 2:
                ObjectRepoTable.editCellAt(getCurRow, 2);
                elmXpathTxt.requestFocusInWindow();
                break;
            default:
                break;
        }
    }//GEN-LAST:event_ObjectRepoTableMousePressed
      
    private void ObjectRepoTableMouseReleased(MouseEvent evt) {//GEN-FIRST:event_ObjectRepoTableMouseReleased
        testElmNameVisible =testElmNameTxt.isShowing();
        getEditingRow =ObjectRepoTable.getEditingRow();
        
        getFlowCellxPoint =ObjectRepoTable.rowAtPoint(evt.getPoint());
        getFlowCellyPoint =ObjectRepoTable.columnAtPoint(evt.getPoint());
    }//GEN-LAST:event_ObjectRepoTableMouseReleased

    private void ObjectRepoTableKeyReleased(KeyEvent evt) {//GEN-FIRST:event_ObjectRepoTableKeyReleased
        //if(evt.getKeyCode() !=10)
            common.checkForDuplicateElementName(null, null,
                ObjectRepoTable,
                testElmNameVisible, 
                getFlowCellxPoint,
                getFlowCellyPoint,
                getEditingRow);
    }//GEN-LAST:event_ObjectRepoTableKeyReleased

    private void ObjectRepoTableKeyTyped(KeyEvent evt) {//GEN-FIRST:event_ObjectRepoTableKeyTyped
       
    }//GEN-LAST:event_ObjectRepoTableKeyTyped

    private void ObjectRepoTableKeyPressed(KeyEvent evt) {//GEN-FIRST:event_ObjectRepoTableKeyPressed

    }//GEN-LAST:event_ObjectRepoTableKeyPressed
    
    /*public boolean checkForDuplicateElementName(){ 
        String getElmName ="";
        String getNewElmName ="";
        boolean isShowing =false;
        //boolean duplicateElmName =false;
        int elmIndex =0;
        duplicateElmName =false;
        
        if(testElmNameTxt.isShowing()){
            tabOutFromEditingColumn(true, ObjectRepoTable,getFlowCellxPoint, getFlowCellyPoint, getEditingRow);
            getNewElmName =testElmNameTxt.getText();
            isShowing =true;
        }
            
        if(testElmNameVisible ==true){
            getNewElmName =testElmNameTxt.getText();
            for(int i=0; i<ObjectRepoTable.getRowCount(); i++){
                try{
                    getElmName =ObjectRepoTable.getValueAt(i, 0).toString().toLowerCase();
                }catch (NullPointerException exp){
                    getElmName ="";
                }
                
                if(!getElmName.isEmpty()){
                    if(getElmName.toLowerCase().contentEquals(getNewElmName.toLowerCase())){
                        elmIndex++;
                        if(elmIndex ==2){
                            //ObjectRepoTable.setRowSelectionInterval(getEditingRow, getEditingRow);
                            ObjectRepoTable.editCellAt(getEditingRow, 0);
                            ObjectRepoTable.getEditorComponent().requestFocus();
                            ObjectRepoTable.changeSelection(getEditingRow, 0, false, true);
                            testElmNameTxt.selectAll();
                            duplicateElmName =true;
                            JOptionPane.showMessageDialog(null, "Element name ["+getNewElmName+"] already exist!", "Alert", JOptionPane.WARNING_MESSAGE);
                            break;
                        }
                    }
                }
            }
        }
        
        return duplicateElmName;
    }*/
    
    /*public boolean checkForDuplicateElementName1(){ 
        String getElmName ="";
        String getNewElmName ="";
        boolean isShowing =false;
        //boolean duplicateElmName =false;
        int elmIndex =0;
        duplicateElmName =false;
            
        if(testElmNameVisible ==true){
            getNewElmName =testElmNameTxt.getText();
            for(int i=0; i<ObjectRepoTable.getRowCount(); i++){
                try{
                    getElmName =ObjectRepoTable.getValueAt(i, 0).toString().toLowerCase();
                }catch (NullPointerException exp){
                    getElmName ="";
                }
                
                if(!getElmName.isEmpty()){
                    if(getElmName.toLowerCase().contentEquals(getNewElmName.toLowerCase())){
                        elmIndex++;
                        if(elmIndex ==2){
                            //ObjectRepoTable.setRowSelectionInterval(getEditingRow, getEditingRow);
                            ObjectRepoTable.editCellAt(getEditingRow, 0);
                            ObjectRepoTable.getEditorComponent().requestFocus();
                            ObjectRepoTable.changeSelection(getEditingRow, 0, false, true);
                            testElmNameTxt.selectAll();
                            duplicateElmName =true;
                            JOptionPane.showMessageDialog(null, "Element name ["+getNewElmName+"] already exist!", "Alert", JOptionPane.WARNING_MESSAGE);
                            break;
                        }
                    }
                }
            }
        }
        
        return duplicateElmName;
    }*/
    
    /*public static void tabOutFromEditingColumn(boolean editingColStatus, JTable myTable, int xCellPoint, int yCellPoint, int selectedRow){
        Component getCellComp = myTable.getComponentAt(xCellPoint, yCellPoint);
        if(getCellComp !=null){
            myTable.setFocusable(true);
            getCellComp.dispatchEvent(new KeyEvent(getCellComp,KeyEvent.KEY_PRESSED, selectedRow,0,KeyEvent.VK_TAB, ' '));
            if(selectedRow >=0)
                myTable.setRowSelectionInterval(selectedRow, selectedRow);
                myTable.requestFocus();
                myTable.scrollRectToVisible(myTable.getCellRect(selectedRow,selectedRow, true));
        }
    }*/
    
    public static void updateObjectRepository(File excelFile, int sheetIndex){
        FileInputStream fis = null;
        
        try {
            fis = new FileInputStream(excelFile);
            XSSFWorkbook wbSuite = new XSSFWorkbook(fis);  
            XSSFSheet excelSheetTestFlow = wbSuite.getSheetAt(sheetIndex);
            XSSFCell cell = null;
            XSSFDataFormat format = wbSuite.createDataFormat();
            
            XSSFFont font = wbSuite.createFont();
            font.setColor(IndexedColors.WHITE.getIndex());
            CellStyle cellStyle = wbSuite.createCellStyle();
            cellStyle.setFont(font);
            
            cellStyle.setFillBackgroundColor(IndexedColors.BLACK.getIndex());
            cellStyle.setFillPattern(FillPatternType.ALT_BARS);

            for(int j=0; j<importObjectRepoData.getRowCount();j++){
                XSSFRow row = excelSheetTestFlow.createRow(j+1);
                for(int k=0;k<importObjectRepoData.getColumnCount();k++){
                    cell = row.createCell(k);
                    cell.setCellType(CellType.STRING);
                    cell.setCellStyle(cellStyle);
                    try{
                        cell.setCellValue(importObjectRepoData.getValueAt(j, k).toString());
                    }catch (NullPointerException exp){
                        cell.setCellValue("");
                    }
                }
            }
        
            fis.close();
            try (FileOutputStream outFile = new FileOutputStream(excelFile)) {
                wbSuite.write(outFile);
            }
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(EditRegressionSuite.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(EditRegressionSuite.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        //System.setProperty("java.awt.headless", "false");
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ObjectRepoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ObjectRepoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ObjectRepoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ObjectRepoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            //new ObjectRepoFrame().setVisible(true);
        });
        
        testElmNameTxt.addKeyListener(new KeyAdapter() {
            public void keyTyped(KeyEvent evt) {
                common.testElmNameTxtTxtKeyTyped(evt, testElmNameTxt);
            }
        });
    }
    
    public void openObjectRepository(XSSFSheet objRepo){
        importObjectRepoData = new DefaultTableModel();
        importObjectRepoData = (DefaultTableModel) ObjectRepoTable.getModel();
        
        if(objRepo !=null){
            for(int i=1;i<=objRepo.getLastRowNum();i++) {
                XSSFRow excelRow = objRepo.getRow(i);

                XSSFCell testElement = excelRow.getCell(0);
                XSSFCell elmId = excelRow.getCell(1);
                XSSFCell elmXpath = excelRow.getCell(2);

                importObjectRepoData.addRow(new Object[] {testElement,elmId,elmXpath});
           }
            if(ObjectRepoTable.getRowCount() >0){
                ObjectRepoTable.setRowSelectionInterval(0,0);
                ObjectRepoTable.scrollRectToVisible(ObjectRepoTable.getCellRect(0,0, true));
            }
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public JButton AddNewTestElement;
    public JButton DeleteTestElement;
    public JPanel Menu;
    public JScrollPane ObjectRepoScrollPane;
    public JTable ObjectRepoTable;
    public JButton SaveElementRepository;
    // End of variables declaration//GEN-END:variables
}
